version: "3.8"
services:
  postgres:
    container_name: rss-feed_postgres-staging
    volumes:
      - staging-postgres-rss-feed:/var/lib/postgresql/data/
    expose:
      - 5432
    networks:
      - rss-feed-network-staging
    deploy:
      replicas: 1
      restart_policy:
        condition: none
      placement:
        constraints:
          - node.labels.main-node == true

  fetcher:
    container_name: rss-feed_fetcher-staging
    image: ghcr.io/gordonpn/rss-feed_fetcher:latest
    networks:
      - rss-feed-network-staging
    volumes:
      - ${DATA_JSON_STAGING}:/app/data.json
    deploy:
      replicas: 1
      restart_policy:
        condition: none

  backend:
    container_name: rss-feed_backend-staging
    image: ghcr.io/gordonpn/rss-feed_backend:latest
    networks:
      - rss-feed-network-staging
    expose:
      - 8080
    deploy:
      replicas: 1
      restart_policy:
        condition: none

  proxy:
    container_name: rss-feed_proxy-staging
    image: ghcr.io/gordonpn/rss-feed_proxy:latest
    networks:
      - traefik-public
      - rss-feed-network-staging
    expose:
      - 80
    deploy:
      replicas: 1
      restart_policy:
        condition: none
      labels:
        - "traefik.enable=true"
        - "traefik.constraint-label=traefik-public"
        - "traefik.http.services.rss-feed-staging.loadbalancer.server.port=80"
        - "traefik.docker.network=traefik-public"

volumes:
  staging-postgres-rss-feed:
    external:
      name: staging-postgres-rss-feed

networks:
  rss-feed-network-staging:
    driver: overlay
  traefik-public:
    external: true
    driver: overlay
